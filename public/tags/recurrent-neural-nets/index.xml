<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recurrent Neural Nets on </title>
    <link>http://localhost:1313/tags/recurrent-neural-nets/</link>
    <description>Recent content in Recurrent Neural Nets on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Oct 2024 02:41:59 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/recurrent-neural-nets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Recurrent Neural Networks (RNN)</title>
      <link>http://localhost:1313/posts/deep_learning/rnn/</link>
      <pubDate>Mon, 21 Oct 2024 02:41:59 +0200</pubDate>
      <guid>http://localhost:1313/posts/deep_learning/rnn/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Recurrent Neural Networks (RNNs) are a specific type of Neural Networks (NNs) that are especially relevant for sequential data like time series, text, or audio data. In standard NNs all data is treated independently. For example they are not able to capture the temporal relationship in a time series. RNNs however, process the data sequentially, which enables them remember data from the past.&lt;/p&gt;&#xA;&lt;h2 id=&#34;rnn-architecture&#34;&gt;RNN Architecture&lt;/h2&gt;&#xA;&lt;p&gt;In a standard NN all data is processed in parallel. As discussed in &lt;a href=&#34;http://localhost:1313/posts/deep_learning/intro_dl/&#34; title=&#34;intro_dl&#34;&gt;Introduction to Deep Learning&lt;/a&gt; we have an input layer, an output layer and in between a set of hidden layers. All the outputs are calculated independently and there is no connection beween them. A RNN in contrast uses the output of one step as input of the next step in addition to the input data and in that way creates a connection and a memory to data of previous steps. The difference is illustrated in the following plot.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
