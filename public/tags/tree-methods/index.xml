<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tree Methods on </title>
    <link>http://localhost:43771/tags/tree-methods/</link>
    <description>Recent content in Tree Methods on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Jan 2024 09:21:46 -0300</lastBuildDate>
    <atom:link href="http://localhost:43771/tags/tree-methods/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gradient Boost for Regression - Explained</title>
      <link>http://localhost:43771/posts/classical_ml/gradient_boosting_regression/</link>
      <pubDate>Wed, 31 Jan 2024 09:21:46 -0300</pubDate>
      <guid>http://localhost:43771/posts/classical_ml/gradient_boosting_regression/</guid>
      <description>Introduction Gradient Boosting, also called Gradient Boosting Machine (GBM) is a type of supervised Machine Learning algorithm that is based on ensemble learning. It consists of a sequential series of models, each one trying to improve the errors of the previous one. It can be used for both regression and classification tasks. In this post we introduce the algorithm and then explain it in detail for a regression task. We will have a look at the general formulation of the algorithm and then derive and simplify the individual steps for the most common use case, which uses Decision Trees as underlying models and a variation of the Mean Squared Error as loss function.</description>
    </item>
    <item>
      <title>Adaboost for Regression - Example</title>
      <link>http://localhost:43771/posts/classical_ml/adaboost_example_reg/</link>
      <pubDate>Fri, 19 Jan 2024 23:05:44 -0300</pubDate>
      <guid>http://localhost:43771/posts/classical_ml/adaboost_example_reg/</guid>
      <description>Introduction AdaBoost is an ensemble model that sequentially builds new models based on the errors of the previous model to improve the predictions. The most common case is to use Decision Trees as base models. Very often the examples explained are for classification tasks. AdaBoost can, however, also be used for regression problems. This is what we will focus on in this post. This article covers the detailed calculations of a simplified example.</description>
    </item>
    <item>
      <title>AdaBoost for Classification - Example</title>
      <link>http://localhost:43771/posts/classical_ml/adaboost_example_clf/</link>
      <pubDate>Wed, 17 Jan 2024 22:08:14 -0300</pubDate>
      <guid>http://localhost:43771/posts/classical_ml/adaboost_example_clf/</guid>
      <description>Introduction AdaBoost is an ensemble model that is based on Boosting. The individual models are so-called weak learners, which means that they have only little predictive skill, and they are sequentially built to improve the errors of the previous one. A detailed description of the Algorithm can be found in the separate article AdaBoost - Explained. In this post, we will focus on a concrete example for a classification task and develop the final ensemble model in detail.</description>
    </item>
    <item>
      <title>AdaBoost - Explained</title>
      <link>http://localhost:43771/posts/classical_ml/adaboost/</link>
      <pubDate>Sun, 14 Jan 2024 09:22:00 -0300</pubDate>
      <guid>http://localhost:43771/posts/classical_ml/adaboost/</guid>
      <description>Introduction AdaBoost is an example of an ensemble supervised Machine Learning model. It consists of a sequential series of models, each one focussing on the errors of the previous one, trying to improve them. The most common underlying model is the Decision Tree, other models are however possible. In this post, we will introduce the algorithm of AdaBoost and have a look at a simplified example for a classification task using sklearn.</description>
    </item>
    <item>
      <title>Random Forests - Explained</title>
      <link>http://localhost:43771/posts/classical_ml/random_forest/</link>
      <pubDate>Tue, 26 Dec 2023 10:57:13 +0100</pubDate>
      <guid>http://localhost:43771/posts/classical_ml/random_forest/</guid>
      <description>Introduction A Random Forest is a supervised Machine Learning model, that is built on Decision Trees. To understand how a Random Forest works, you should be familiar with Decision Trees. You can find an introduction in the separate article Decision Trees - Explained. A major disadvantage of Decision Trees is that they tend to overfit and often have difficulties to generalize to new data. Random Forests try to overcome this weakness.</description>
    </item>
    <item>
      <title>Decision Trees for Regression - Example</title>
      <link>http://localhost:43771/posts/classical_ml/decision_tree_regression_example/</link>
      <pubDate>Tue, 19 Dec 2023 17:46:29 +0100</pubDate>
      <guid>http://localhost:43771/posts/classical_ml/decision_tree_regression_example/</guid>
      <description>Introduction A Decision Tree is a simple Machine Learning model that can be used for both regression and classification tasks. In the article Decision Trees for Classification - Example a Decision Tree for a classification problem is developed in detail. In this post, we consider a regression problem and build a Decision Tree step by step for a simplified dataset. Additionally, we use sklearn to fit a model to the data and compare the results.</description>
    </item>
    <item>
      <title>Decision Trees for Classification - Example</title>
      <link>http://localhost:43771/posts/classical_ml/decision_tree_classification_example/</link>
      <pubDate>Tue, 19 Dec 2023 09:11:46 +0100</pubDate>
      <guid>http://localhost:43771/posts/classical_ml/decision_tree_classification_example/</guid>
      <description>Introduction Decision Trees are a powerful, yet simple Machine Learning Model. An advantage of their simplicity is that we can build and understand them step by step. In this post, we are looking at a simplified example to build an entire Decision Tree by hand for a classification task. After calculating the tree, we will use the sklearn package and compare the results. To learn how to build a Decision Tree for a regression problem, please refer to the article Decision Trees for Regression - Example.</description>
    </item>
    <item>
      <title>Decision Trees - Explained</title>
      <link>http://localhost:43771/posts/classical_ml/decision_trees/</link>
      <pubDate>Sat, 16 Dec 2023 12:33:55 +0100</pubDate>
      <guid>http://localhost:43771/posts/classical_ml/decision_trees/</guid>
      <description>Introduction A Decision Tree is a supervised Machine Learning algorithm that can be used for both regression and classification problems. It is a non-parametric model, which means there is no specific mathematical function underlying to fit the data (in contrast to e.g. Linear Regression or Logistic Regression), but the algorithm only learns from the data itself. Decision Trees learn rules for decision making and used to be drawn manually before Machine Learning came up.</description>
    </item>
  </channel>
</rss>
